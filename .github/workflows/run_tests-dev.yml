name: Dev branch tests.

on:
  push:
    branches:
        - development

jobs:
  tests:
    name: Run package tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10.11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest virtualenv
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install optional requirements as well:
          if [ -f opt_requirements.txt ]; then pip install -r opt_requirements.txt; fi
      - name: Check Syntax
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run Unit Tests with pytest
        env:
          HERO_POSTGRES_USERNAME: postgres
          HERO_POSTGRES_PASSWORD: postgres
          HERO_POSTGRES_HOST: localhost
          HERO_POSTGRES_PORT: 5432
        run: |
          pytest
      - name: Test package setup
        env:
          HERO_POSTGRES_USERNAME: postgres
          HERO_POSTGRES_PASSWORD: postgres
          HERO_POSTGRES_HOST: localhost
          HERO_POSTGRES_PORT: 5432
        run: |
          mkdir -p tmp
          cp -r tests tmp
          # Create virtual environment:
          virtualenv venv
          # Make python distribution:
          ./venv/bin/python setup.py sdist --formats=gztar
          # Install package on virtual environment:
          FNAME=dist/`python setup.py --fullname`.tar.gz
          ./venv/bin/python -m pip install $FNAME
          ./venv/bin/python -m pip install pytest
          ./venv/bin/python -m pip install -r opt_requirements.txt
          # Run test in different directory (Just one):
          cd tmp
          ../venv/bin/python -m pytest -k test_select_all --disable-pytest-warnings
